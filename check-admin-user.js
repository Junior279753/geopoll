const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Chemin vers la base de donn√©es
const dbPath = path.join(__dirname, 'database', 'geopoll.db');

// Connexion √† la base de donn√©es
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå Erreur de connexion √† la base de donn√©es:', err.message);
        return;
    }
    console.log('‚úÖ Connect√© √† la base de donn√©es SQLite');
});

// Fonction pour v√©rifier les utilisateurs admin
function checkAdminUsers() {
    return new Promise((resolve, reject) => {
        const query = `
            SELECT id, email, first_name, last_name, is_admin, is_active, admin_approved, created_at
            FROM users 
            WHERE is_admin = 1
            ORDER BY created_at DESC
        `;
        
        db.all(query, (err, rows) => {
            if (err) {
                reject(err);
                return;
            }
            resolve(rows);
        });
    });
}

// Fonction pour v√©rifier tous les utilisateurs
function checkAllUsers() {
    return new Promise((resolve, reject) => {
        const query = `
            SELECT id, email, first_name, last_name, is_admin, is_active, admin_approved, created_at
            FROM users 
            ORDER BY created_at DESC
            LIMIT 10
        `;
        
        db.all(query, (err, rows) => {
            if (err) {
                reject(err);
                return;
            }
            resolve(rows);
        });
    });
}

// Fonction pour cr√©er un utilisateur admin si n√©cessaire
function createAdminUser() {
    return new Promise((resolve, reject) => {
        const bcrypt = require('bcryptjs');
        const email = 'admin@geopoll.com';
        const password = 'admin123'; // Mot de passe par d√©faut
        
        // V√©rifier si l'admin existe d√©j√†
        db.get('SELECT id FROM users WHERE email = ?', [email], async (err, row) => {
            if (err) {
                reject(err);
                return;
            }
            
            if (row) {
                console.log('‚úÖ Utilisateur admin existe d√©j√† avec l\'ID:', row.id);
                resolve(row);
                return;
            }
            
            // Cr√©er l'utilisateur admin
            try {
                const passwordHash = await bcrypt.hash(password, 10);
                
                const query = `
                    INSERT INTO users (
                        email, password_hash, first_name, last_name, 
                        is_admin, is_active, admin_approved, created_at
                    ) VALUES (?, ?, ?, ?, 1, 1, 1, CURRENT_TIMESTAMP)
                `;
                
                db.run(query, [email, passwordHash, 'Super', 'Admin'], function(err) {
                    if (err) {
                        reject(err);
                        return;
                    }
                    
                    console.log('‚úÖ Utilisateur admin cr√©√© avec l\'ID:', this.lastID);
                    resolve({ id: this.lastID });
                });
                
            } catch (error) {
                reject(error);
            }
        });
    });
}

// Ex√©cution principale
async function main() {
    try {
        console.log('\nüîç === V√âRIFICATION DES UTILISATEURS ADMIN ===\n');
        
        // V√©rifier les utilisateurs admin existants
        const adminUsers = await checkAdminUsers();
        
        if (adminUsers.length === 0) {
            console.log('‚ö†Ô∏è  Aucun utilisateur admin trouv√© !');
            console.log('üîÑ Cr√©ation d\'un utilisateur admin par d√©faut...\n');
            
            await createAdminUser();
            
            // Rev√©rifier apr√®s cr√©ation
            const newAdminUsers = await checkAdminUsers();
            console.log('\nüìã Utilisateurs admin apr√®s cr√©ation:');
            newAdminUsers.forEach((user, index) => {
                console.log(`${index + 1}. ${user.first_name} ${user.last_name}`);
                console.log(`   üìß Email: ${user.email}`);
                console.log(`   üÜî ID: ${user.id}`);
                console.log(`   üõ°Ô∏è  Admin: ${user.is_admin ? 'Oui' : 'Non'}`);
                console.log(`   ‚úÖ Actif: ${user.is_active ? 'Oui' : 'Non'}`);
                console.log(`   ‚úÖ Approuv√©: ${user.admin_approved ? 'Oui' : 'Non'}`);
                console.log(`   üìÖ Cr√©√©: ${new Date(user.created_at).toLocaleDateString('fr-FR')}`);
                console.log('');
            });
        } else {
            console.log(`‚úÖ ${adminUsers.length} utilisateur(s) admin trouv√©(s):\n`);
            
            adminUsers.forEach((user, index) => {
                console.log(`${index + 1}. ${user.first_name} ${user.last_name}`);
                console.log(`   üìß Email: ${user.email}`);
                console.log(`   üÜî ID: ${user.id}`);
                console.log(`   üõ°Ô∏è  Admin: ${user.is_admin ? 'Oui' : 'Non'}`);
                console.log(`   ‚úÖ Actif: ${user.is_active ? 'Oui' : 'Non'}`);
                console.log(`   ‚úÖ Approuv√©: ${user.admin_approved ? 'Oui' : 'Non'}`);
                console.log(`   üìÖ Cr√©√©: ${new Date(user.created_at).toLocaleDateString('fr-FR')}`);
                console.log('');
            });
        }
        
        // Afficher tous les utilisateurs pour r√©f√©rence
        console.log('üìã === TOUS LES UTILISATEURS (10 derniers) ===\n');
        const allUsers = await checkAllUsers();
        allUsers.forEach((user, index) => {
            console.log(`${index + 1}. ${user.first_name} ${user.last_name} (${user.email})`);
            console.log(`   üõ°Ô∏è  Admin: ${user.is_admin ? 'Oui' : 'Non'} | Actif: ${user.is_active ? 'Oui' : 'Non'} | Approuv√©: ${user.admin_approved ? 'Oui' : 'Non'}`);
        });
        
        console.log('\nüí° Pour vous connecter en tant qu\'admin:');
        console.log('   Email: admin@geopoll.com');
        console.log('   Mot de passe: admin123');
        
    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
    } finally {
        // Fermer la connexion
        db.close((err) => {
            if (err) {
                console.error('‚ùå Erreur lors de la fermeture:', err.message);
            } else {
                console.log('\n‚úÖ Connexion ferm√©e');
            }
        });
    }
}

// Lancer le script
main();
